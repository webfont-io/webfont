// Code generated by protoc-gen-go. DO NOT EDIT.
// source: webfont.proto

package webfontsdk

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FontInfoRequet struct {
	Apikey               string   `protobuf:"bytes,1,opt,name=apikey,proto3" json:"apikey,omitempty" bson:"apikey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FontInfoRequet) Reset()         { *m = FontInfoRequet{} }
func (m *FontInfoRequet) String() string { return proto.CompactTextString(m) }
func (*FontInfoRequet) ProtoMessage()    {}
func (*FontInfoRequet) Descriptor() ([]byte, []int) {
	return fileDescriptor_e04e5ea2200a7886, []int{0}
}

func (m *FontInfoRequet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FontInfoRequet.Unmarshal(m, b)
}
func (m *FontInfoRequet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FontInfoRequet.Marshal(b, m, deterministic)
}
func (m *FontInfoRequet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FontInfoRequet.Merge(m, src)
}
func (m *FontInfoRequet) XXX_Size() int {
	return xxx_messageInfo_FontInfoRequet.Size(m)
}
func (m *FontInfoRequet) XXX_DiscardUnknown() {
	xxx_messageInfo_FontInfoRequet.DiscardUnknown(m)
}

var xxx_messageInfo_FontInfoRequet proto.InternalMessageInfo

func (m *FontInfoRequet) GetApikey() string {
	if m != nil {
		return m.Apikey
	}
	return ""
}

type FontInfoResult struct {
	//uint32 font_id = 1;
	//uint64 express = 2;
	Fonts                map[string]int64 `protobuf:"bytes,1,rep,name=fonts,proto3" json:"fonts,omitempty" bson:"fonts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" bson:"-"`
	XXX_unrecognized     []byte           `json:"-" bson:"-"`
	XXX_sizecache        int32            `json:"-" bson:"-"`
}

func (m *FontInfoResult) Reset()         { *m = FontInfoResult{} }
func (m *FontInfoResult) String() string { return proto.CompactTextString(m) }
func (*FontInfoResult) ProtoMessage()    {}
func (*FontInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e04e5ea2200a7886, []int{1}
}

func (m *FontInfoResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FontInfoResult.Unmarshal(m, b)
}
func (m *FontInfoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FontInfoResult.Marshal(b, m, deterministic)
}
func (m *FontInfoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FontInfoResult.Merge(m, src)
}
func (m *FontInfoResult) XXX_Size() int {
	return xxx_messageInfo_FontInfoResult.Size(m)
}
func (m *FontInfoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FontInfoResult.DiscardUnknown(m)
}

var xxx_messageInfo_FontInfoResult proto.InternalMessageInfo

func (m *FontInfoResult) GetFonts() map[string]int64 {
	if m != nil {
		return m.Fonts
	}
	return nil
}

type FontBuildRequest struct {
	FontId               uint32   `protobuf:"varint,1,opt,name=font_id,json=fontId,proto3" json:"font_id,omitempty" bson:"font_id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty" bson:"text,omitempty"`
	Apikey               string   `protobuf:"bytes,3,opt,name=apikey,proto3" json:"apikey,omitempty" bson:"apikey,omitempty"`
	NeedTtf              bool     `protobuf:"varint,4,opt,name=need_ttf,json=needTtf,proto3" json:"need_ttf,omitempty" bson:"need_ttf,omitempty"`
	NeedEot              bool     `protobuf:"varint,5,opt,name=need_eot,json=needEot,proto3" json:"need_eot,omitempty" bson:"need_eot,omitempty"`
	NeedWoff             bool     `protobuf:"varint,6,opt,name=need_woff,json=needWoff,proto3" json:"need_woff,omitempty" bson:"need_woff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FontBuildRequest) Reset()         { *m = FontBuildRequest{} }
func (m *FontBuildRequest) String() string { return proto.CompactTextString(m) }
func (*FontBuildRequest) ProtoMessage()    {}
func (*FontBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e04e5ea2200a7886, []int{2}
}

func (m *FontBuildRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FontBuildRequest.Unmarshal(m, b)
}
func (m *FontBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FontBuildRequest.Marshal(b, m, deterministic)
}
func (m *FontBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FontBuildRequest.Merge(m, src)
}
func (m *FontBuildRequest) XXX_Size() int {
	return xxx_messageInfo_FontBuildRequest.Size(m)
}
func (m *FontBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FontBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FontBuildRequest proto.InternalMessageInfo

func (m *FontBuildRequest) GetFontId() uint32 {
	if m != nil {
		return m.FontId
	}
	return 0
}

func (m *FontBuildRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *FontBuildRequest) GetApikey() string {
	if m != nil {
		return m.Apikey
	}
	return ""
}

func (m *FontBuildRequest) GetNeedTtf() bool {
	if m != nil {
		return m.NeedTtf
	}
	return false
}

func (m *FontBuildRequest) GetNeedEot() bool {
	if m != nil {
		return m.NeedEot
	}
	return false
}

func (m *FontBuildRequest) GetNeedWoff() bool {
	if m != nil {
		return m.NeedWoff
	}
	return false
}

type MultFontBuildRequest struct {
	Items                []*FontBuildRequest `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" bson:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *MultFontBuildRequest) Reset()         { *m = MultFontBuildRequest{} }
func (m *MultFontBuildRequest) String() string { return proto.CompactTextString(m) }
func (*MultFontBuildRequest) ProtoMessage()    {}
func (*MultFontBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e04e5ea2200a7886, []int{3}
}

func (m *MultFontBuildRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultFontBuildRequest.Unmarshal(m, b)
}
func (m *MultFontBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultFontBuildRequest.Marshal(b, m, deterministic)
}
func (m *MultFontBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultFontBuildRequest.Merge(m, src)
}
func (m *MultFontBuildRequest) XXX_Size() int {
	return xxx_messageInfo_MultFontBuildRequest.Size(m)
}
func (m *MultFontBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MultFontBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MultFontBuildRequest proto.InternalMessageInfo

func (m *MultFontBuildRequest) GetItems() []*FontBuildRequest {
	if m != nil {
		return m.Items
	}
	return nil
}

type FontBuildBufResult struct {
	FontId               uint32   `protobuf:"varint,1,opt,name=font_id,json=fontId,proto3" json:"font_id,omitempty" bson:"font_id,omitempty"`
	FontFormatVersion    uint32   `protobuf:"varint,2,opt,name=font_format_version,json=fontFormatVersion,proto3" json:"font_format_version,omitempty" bson:"font_format_version,omitempty"`
	FontChecksum         uint32   `protobuf:"varint,3,opt,name=font_checksum,json=fontChecksum,proto3" json:"font_checksum,omitempty" bson:"font_checksum,omitempty"`
	NameEn               string   `protobuf:"bytes,4,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty" bson:"name_en,omitempty"`
	BytesTtf             []byte   `protobuf:"bytes,5,opt,name=bytes_ttf,json=bytesTtf,proto3" json:"bytes_ttf,omitempty" bson:"bytes_ttf,omitempty"`
	BytesEot             []byte   `protobuf:"bytes,6,opt,name=bytes_eot,json=bytesEot,proto3" json:"bytes_eot,omitempty" bson:"bytes_eot,omitempty"`
	BytesWoff            []byte   `protobuf:"bytes,7,opt,name=bytes_woff,json=bytesWoff,proto3" json:"bytes_woff,omitempty" bson:"bytes_woff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FontBuildBufResult) Reset()         { *m = FontBuildBufResult{} }
func (m *FontBuildBufResult) String() string { return proto.CompactTextString(m) }
func (*FontBuildBufResult) ProtoMessage()    {}
func (*FontBuildBufResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e04e5ea2200a7886, []int{4}
}

func (m *FontBuildBufResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FontBuildBufResult.Unmarshal(m, b)
}
func (m *FontBuildBufResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FontBuildBufResult.Marshal(b, m, deterministic)
}
func (m *FontBuildBufResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FontBuildBufResult.Merge(m, src)
}
func (m *FontBuildBufResult) XXX_Size() int {
	return xxx_messageInfo_FontBuildBufResult.Size(m)
}
func (m *FontBuildBufResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FontBuildBufResult.DiscardUnknown(m)
}

var xxx_messageInfo_FontBuildBufResult proto.InternalMessageInfo

func (m *FontBuildBufResult) GetFontId() uint32 {
	if m != nil {
		return m.FontId
	}
	return 0
}

func (m *FontBuildBufResult) GetFontFormatVersion() uint32 {
	if m != nil {
		return m.FontFormatVersion
	}
	return 0
}

func (m *FontBuildBufResult) GetFontChecksum() uint32 {
	if m != nil {
		return m.FontChecksum
	}
	return 0
}

func (m *FontBuildBufResult) GetNameEn() string {
	if m != nil {
		return m.NameEn
	}
	return ""
}

func (m *FontBuildBufResult) GetBytesTtf() []byte {
	if m != nil {
		return m.BytesTtf
	}
	return nil
}

func (m *FontBuildBufResult) GetBytesEot() []byte {
	if m != nil {
		return m.BytesEot
	}
	return nil
}

func (m *FontBuildBufResult) GetBytesWoff() []byte {
	if m != nil {
		return m.BytesWoff
	}
	return nil
}

type MultFontBuildBufResult struct {
	Items                []*FontBuildBufResult `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" bson:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" bson:"-"`
	XXX_unrecognized     []byte                `json:"-" bson:"-"`
	XXX_sizecache        int32                 `json:"-" bson:"-"`
}

func (m *MultFontBuildBufResult) Reset()         { *m = MultFontBuildBufResult{} }
func (m *MultFontBuildBufResult) String() string { return proto.CompactTextString(m) }
func (*MultFontBuildBufResult) ProtoMessage()    {}
func (*MultFontBuildBufResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e04e5ea2200a7886, []int{5}
}

func (m *MultFontBuildBufResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultFontBuildBufResult.Unmarshal(m, b)
}
func (m *MultFontBuildBufResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultFontBuildBufResult.Marshal(b, m, deterministic)
}
func (m *MultFontBuildBufResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultFontBuildBufResult.Merge(m, src)
}
func (m *MultFontBuildBufResult) XXX_Size() int {
	return xxx_messageInfo_MultFontBuildBufResult.Size(m)
}
func (m *MultFontBuildBufResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MultFontBuildBufResult.DiscardUnknown(m)
}

var xxx_messageInfo_MultFontBuildBufResult proto.InternalMessageInfo

func (m *MultFontBuildBufResult) GetItems() []*FontBuildBufResult {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*FontInfoRequet)(nil), "webfontsdk.FontInfoRequet")
	proto.RegisterType((*FontInfoResult)(nil), "webfontsdk.FontInfoResult")
	proto.RegisterMapType((map[string]int64)(nil), "webfontsdk.FontInfoResult.FontsEntry")
	proto.RegisterType((*FontBuildRequest)(nil), "webfontsdk.FontBuildRequest")
	proto.RegisterType((*MultFontBuildRequest)(nil), "webfontsdk.MultFontBuildRequest")
	proto.RegisterType((*FontBuildBufResult)(nil), "webfontsdk.FontBuildBufResult")
	proto.RegisterType((*MultFontBuildBufResult)(nil), "webfontsdk.MultFontBuildBufResult")
}

func init() { proto.RegisterFile("webfont.proto", fileDescriptor_e04e5ea2200a7886) }

var fileDescriptor_e04e5ea2200a7886 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x3b, 0x4d, 0xe3, 0xc4, 0xb7, 0x31, 0x0a, 0x43, 0x55, 0x8c, 0xf9, 0x91, 0x65, 0x84,
	0xe4, 0x95, 0x17, 0x81, 0x45, 0x05, 0xbb, 0xa0, 0x34, 0x2a, 0x08, 0x54, 0x8d, 0x10, 0x59, 0x46,
	0x49, 0x3d, 0x23, 0xac, 0x24, 0x9e, 0x62, 0x5f, 0xb7, 0xe4, 0x09, 0x78, 0x17, 0x9e, 0x8f, 0x05,
	0x4b, 0x34, 0xd7, 0x6e, 0xec, 0x40, 0x02, 0x3b, 0x9f, 0x7b, 0xce, 0x1c, 0xcf, 0x7c, 0xce, 0x04,
	0x9c, 0x5b, 0x39, 0x57, 0x3a, 0xc5, 0xe8, 0x3a, 0xd3, 0xa8, 0x39, 0x54, 0x32, 0x8f, 0x17, 0x41,
	0x08, 0xf7, 0xce, 0x75, 0x8a, 0x17, 0xa9, 0xd2, 0x42, 0x7e, 0x2d, 0x24, 0xf2, 0x53, 0xb0, 0x66,
	0xd7, 0xc9, 0x42, 0xae, 0x5d, 0xe6, 0xb3, 0xd0, 0x16, 0x95, 0x0a, 0xbe, 0xb3, 0x66, 0x34, 0x2f,
	0x96, 0xc8, 0xdf, 0x40, 0x9b, 0x7a, 0x5c, 0xe6, 0xb7, 0xc2, 0xe3, 0xc1, 0x8b, 0xa8, 0x2e, 0x8e,
	0xb6, 0xa3, 0x24, 0xf3, 0x51, 0x8a, 0xd9, 0x5a, 0x94, 0x6b, 0xbc, 0x33, 0x80, 0x7a, 0xc8, 0xfb,
	0xd0, 0xaa, 0x5f, 0x69, 0x1e, 0xf9, 0x09, 0xb4, 0x6f, 0x66, 0xcb, 0x42, 0xba, 0x87, 0x3e, 0x0b,
	0x5b, 0xa2, 0x14, 0xaf, 0x0f, 0xcf, 0x58, 0xf0, 0x83, 0x41, 0xdf, 0x2c, 0x1d, 0x16, 0xc9, 0x32,
	0xa6, 0x5d, 0xe7, 0xc8, 0x1f, 0x42, 0xc7, 0xf4, 0x4e, 0x93, 0x98, 0x4a, 0x1c, 0x61, 0x19, 0x79,
	0x11, 0x73, 0x0e, 0x47, 0x28, 0xbf, 0x21, 0xd5, 0xd8, 0x82, 0x9e, 0x1b, 0x67, 0x6c, 0x35, 0xcf,
	0xc8, 0x1f, 0x41, 0x37, 0x95, 0x32, 0x9e, 0x22, 0x2a, 0xf7, 0xc8, 0x67, 0x61, 0x57, 0x74, 0x8c,
	0xfe, 0x84, 0x6a, 0x63, 0x49, 0x8d, 0x6e, 0xbb, 0xb6, 0x46, 0x1a, 0xf9, 0x63, 0xb0, 0xc9, 0xba,
	0xd5, 0x4a, 0xb9, 0x16, 0x79, 0x94, 0x9d, 0x68, 0xa5, 0x82, 0x77, 0x70, 0xf2, 0xa1, 0x58, 0xe2,
	0x5f, 0xfb, 0x1d, 0x40, 0x3b, 0x41, 0xb9, 0xba, 0x63, 0xf7, 0xe4, 0x4f, 0x76, 0xcd, 0xb0, 0x28,
	0xa3, 0xc1, 0x4f, 0x06, 0x7c, 0xe3, 0x0d, 0x0b, 0x55, 0x7d, 0x86, 0xbd, 0x47, 0x8f, 0xe0, 0x01,
	0x19, 0x4a, 0x67, 0xab, 0x19, 0x4e, 0x6f, 0x64, 0x96, 0x27, 0x3a, 0x25, 0x12, 0x8e, 0xb8, 0x6f,
	0xac, 0x73, 0x72, 0x3e, 0x97, 0x06, 0x7f, 0x0e, 0x0e, 0xe5, 0xaf, 0xbe, 0xc8, 0xab, 0x45, 0x5e,
	0xac, 0x88, 0x8e, 0x23, 0x7a, 0x66, 0xf8, 0xb6, 0x9a, 0x99, 0xb7, 0xa5, 0xb3, 0x95, 0x9c, 0xca,
	0x94, 0x10, 0xd9, 0xc2, 0x32, 0x72, 0x94, 0x1a, 0x0c, 0xf3, 0x35, 0xca, 0x9c, 0xe8, 0x19, 0x44,
	0x3d, 0xd1, 0xa5, 0x81, 0xc1, 0xb7, 0x31, 0x0d, 0x3f, 0xab, 0x61, 0x1a, 0x80, 0x4f, 0x01, 0x4a,
	0x93, 0x08, 0x76, 0xc8, 0x2d, 0xe3, 0x84, 0xf0, 0x23, 0x9c, 0x6e, 0x21, 0xac, 0x4f, 0xfe, 0x6a,
	0x1b, 0xe2, 0xb3, 0x9d, 0x10, 0x37, 0xf1, 0x0a, 0xe3, 0xe0, 0x17, 0x83, 0xce, 0x38, 0x93, 0x12,
	0x65, 0xc6, 0xdf, 0x83, 0x4d, 0x21, 0x93, 0xe6, 0xff, 0xfc, 0x08, 0xde, 0x7f, 0xda, 0x83, 0x03,
	0x3e, 0x01, 0xc7, 0x6c, 0xb4, 0x2e, 0xf4, 0x9b, 0x4b, 0x76, 0xfd, 0x0c, 0xbc, 0x60, 0x6f, 0xa2,
	0x59, 0x3c, 0x86, 0xe3, 0xb1, 0xc4, 0xbb, 0x2b, 0xc5, 0xbd, 0xdd, 0x17, 0xcd, 0x5c, 0x5f, 0xcf,
	0xdb, 0x7f, 0x09, 0x83, 0x83, 0x61, 0x00, 0xfd, 0x44, 0x47, 0x5b, 0x7f, 0x07, 0xc3, 0xde, 0xa4,
	0x94, 0x97, 0x46, 0x5d, 0xb2, 0xb9, 0x45, 0xe3, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x66,
	0xcd, 0x21, 0xee, 0x36, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	//单字体生成
	BuildFont(ctx context.Context, in *FontBuildRequest, opts ...grpc.CallOption) (*FontBuildBufResult, error)
	//多请求混合
	MultBuildFont(ctx context.Context, in *MultFontBuildRequest, opts ...grpc.CallOption) (*MultFontBuildBufResult, error)
	GetFontInfo(ctx context.Context, in *FontInfoRequet, opts ...grpc.CallOption) (*FontInfoResult, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) BuildFont(ctx context.Context, in *FontBuildRequest, opts ...grpc.CallOption) (*FontBuildBufResult, error) {
	out := new(FontBuildBufResult)
	err := c.cc.Invoke(ctx, "/webfontsdk.Greeter/BuildFont", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) MultBuildFont(ctx context.Context, in *MultFontBuildRequest, opts ...grpc.CallOption) (*MultFontBuildBufResult, error) {
	out := new(MultFontBuildBufResult)
	err := c.cc.Invoke(ctx, "/webfontsdk.Greeter/MultBuildFont", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetFontInfo(ctx context.Context, in *FontInfoRequet, opts ...grpc.CallOption) (*FontInfoResult, error) {
	out := new(FontInfoResult)
	err := c.cc.Invoke(ctx, "/webfontsdk.Greeter/GetFontInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	//单字体生成
	BuildFont(context.Context, *FontBuildRequest) (*FontBuildBufResult, error)
	//多请求混合
	MultBuildFont(context.Context, *MultFontBuildRequest) (*MultFontBuildBufResult, error)
	GetFontInfo(context.Context, *FontInfoRequet) (*FontInfoResult, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_BuildFont_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FontBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).BuildFont(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webfontsdk.Greeter/BuildFont",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).BuildFont(ctx, req.(*FontBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_MultBuildFont_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultFontBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).MultBuildFont(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webfontsdk.Greeter/MultBuildFont",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).MultBuildFont(ctx, req.(*MultFontBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetFontInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FontInfoRequet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetFontInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webfontsdk.Greeter/GetFontInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetFontInfo(ctx, req.(*FontInfoRequet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webfontsdk.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildFont",
			Handler:    _Greeter_BuildFont_Handler,
		},
		{
			MethodName: "MultBuildFont",
			Handler:    _Greeter_MultBuildFont_Handler,
		},
		{
			MethodName: "GetFontInfo",
			Handler:    _Greeter_GetFontInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webfont.proto",
}
